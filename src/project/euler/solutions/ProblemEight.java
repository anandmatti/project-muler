package project.euler.solutions;

/*
* Project Muler: Project Euler problem solutions
* Solution For:
* ***********************************
* Problem 9 : Largest product in a series
* ***************************************************
* 
* Find the greatest product of five consecutive digits in the 1000-digit number.
* 			73167176531330624919225119674426574742355349194934
* 			96983520312774506326239578318016984801869478851843
* 			85861560789112949495459501737958331952853208805511
* 			12540698747158523863050715693290963295227443043557
* 			66896648950445244523161731856403098711121722383113
* 			62229893423380308135336276614282806444486645238749
* 			30358907296290491560440772390713810515859307960866
* 			70172427121883998797908792274921901699720888093776
* 			65727333001053367881220235421809751254540594752243
* 			52584907711670556013604839586446706324415722155397
* 			53697817977846174064955149290862569321978468622482
* 			83972241375657056057490261407972968652414535100474
* 			82166370484403199890008895243450658541227588666881
* 			16427171479924442928230863465674813919123162824586
* 			17866458359124566529476545682848912883142607690042
* 			24219022671055626321111109370544217506941658960408
* 			07198403850962455444362981230987879927244284909188
* 			84580156166097919133875499200524063689912560717606
* 			05886116467109405077541002256983155200055935729725
* 			71636269561882670428252483600823257530420752963450
* 
* 
* ***************************************************
* 
* Author: Anand Mattikopp
*
*/

public class ProblemEight {
	
	public static void main(String[] args){
		ProblemEight prob8 = new ProblemEight();
		prob8.run();
	}
	
	public void run(){
		String number = "73167176531339106249225119674426574742355349191934"+
						"96983520312774506326239578318016984801869478851843" +
						"85861560789112949495459501737958331952853208805511" +
						"12540698747158523863050715693290963295227443043557" +
						"66896648950445244523161731856403098711121722383113" +
						"62229893423380308135336276614282806444486645238749" +
						"30358907296290491560440772390713810515859307960866" +
						"70172427121883998797908792274921901699720888093776" +
						"65727333001053367881220235421809751254540594752243" +
						"52584907711670556013604839586446706324415722155397" +
						"53697817977846174064955149290862569321978468622482" +
						"83972241375657056057490261407972968652414535100474" +
						"82166370484403199890008895243450658541227588666881" +
						"16427171479924442928230863465674813919123162824586" +
						"17866458359124566529476545682848912883142607690042" +
						"24219022671055626321111109370544217506941658960408" +
						"07198403850962455444362981230987879927244284909188" +
						"84580156166097919133875499200524063689912560717606" +
						"05886116467109405077541002256983155200055935729725" +
						"71636269561882670428252483600823257530420752969950";
		
		int digits = 5;
		long sumOfDigits = maxProductOfConsecutiveDigits(number,digits);
		System.out.println(sumOfDigits);
	}
	
	public long maxProductOfConsecutiveDigits(String number, int nDigits){
		long product =1;
		long maxProduct = 1;
		int count = 0;
		int maxDigits = number.length();
		
		for (int i=0; i<nDigits;i++){
			if (i<maxDigits){
				String str = number.substring(i,i+1);
				if (!"".equalsIgnoreCase(str)){
					int digit = Integer.parseInt(str);
					product = product*digit ;
					count = count + 1;
				}
			}
		}
		
		maxProduct = product;
		while (count < maxDigits){
			int nextDigit = Integer.parseInt(number.substring(count,count+1).toString());
			int prevDigit = Integer.parseInt(number.substring(count-nDigits,count-nDigits+1).toString());
			product = product*nextDigit;
			if (product!=0)
				product = product/prevDigit;
			else
				product = maxProductOfConsecutiveDigits(number.substring(count-nDigits+1, count+1),nDigits);
			
			if (product > maxProduct){
				maxProduct = product;
			}
			count = count + 1;
		}
		
		return maxProduct;
	}
	
}